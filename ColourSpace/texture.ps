
Texture2D shaderTexture;
SamplerState SampleType;

cbuffer TransparentBuffer
{
    float blendAmount;
};

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};

float4 TexturePixelShader(PixelInputType input) : SV_TARGET
{
	float4 color;
	
	color = shaderTexture.Sample(SampleType, input.tex);	

	//if purple make it transparent
	if(color.r >= 0.9f && color.g == 0 && color.b >= 0.9f)
	{
		color.a = 0;
	}

	return color;




	//float4 color = float4(1,1,1,1);
	//float4 outcolor = float4(0.1f, 0.1f, 0.1f, 1);

	//CRT curvature
	//float distortion = 0.3f; 
    //float2 cc = input.tex - 0.5; 
    //float dist = dot(cc, cc) * distortion; 
    //float2 coordreturn = input.tex  * (input.tex  + cc * (1.0 + dist) * dist) / input.tex;

	//input.tex = coordreturn * 0.95f;

	// fake chromatic aberration
	//float2 texCoordOffset = float2(0.003, 0); 
    //float r = shaderTexture.Sample(SampleType, input.tex - texCoordOffset).r; 
    //float g = shaderTexture.Sample(SampleType, input.tex).g; 
    //float b = shaderTexture.Sample(SampleType, input.tex + texCoordOffset).b; 
    //outcolor = float4(r,g,b,1); 

	//Lines
	//int pp = (int)input.position.x * abs(sin(input.tex.x * 2000)) % 3; //static look

	//int pp = (int)input.position.x % 3; 
	//if (pp == 1) outcolor.r = color.r;
	//else if (pp == 2) outcolor.g = color.g;
	//	else outcolor.b = color.b;

	//if ((int)input.position.y * abs(sin(input.tex.y * 2000)) % 2 == 0) //static look

	//if ((int)input.position.y % 2 == 0) 
	//	outcolor *= float4(0.3f, 0.3f, 0.3f, 1);

	//scanlines
	//outcolor *= abs(sin(input.tex.x * input.tex.y * 2000)); 

	//return shaderTexture.Sample(SampleType, input.tex) * (outcolor + float4(0.3f,0.3f,0.3f,1));
}
